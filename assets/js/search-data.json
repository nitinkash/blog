{
  
    
        "post0": {
            "title": "Title",
            "content": "As recommeneded by Jeremy, I am writing this blog to deepen my understanding of Deep Learning. Here I am hoping to expand on the material presented in the fastai course and create a full blown MNIST classifier using fastai. . from fastai.vision.all import * from fastbook import * matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) . Quite pissed that I ran into some issues in the import statement itself. After some googling in the fastai forums, I found that apparently the fastai version (v2) needs to be explicitly defined. Somehow the notebooks used in the course circumvents this. Anyway glad to have found the answer within a few minutes of googling. If you have this error just follow this: https://forums.fast.ai/t/modulenotfounderror-no-module-named-fastai-vision-all-on-kaggle-notebook/77008/13?u=nitinkashyap . EDIT: Wrote the above part and then Colab on Google chrome crashed for the umpteenth time. I moved to Brave Browser and the original code works perfectly. Guess there was some issue with Google Chrome. . import fastbook fastbook.setup_book() from fastai.vision.all import * from fastbook import * matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) . I absolutely love how fastai has managed to improve the readability of python and provide such small elegant functions that used to be a pain for me to create on python jupyter notebooks before. Usually had about three or four lines of code that just set the input and output paths before. Using the untar_data to basically download the data from fastai&#39;s AWS S3 on to the working directory and decompress this. this function returns the path of the extracted files. SO SO Elegant! . path = untar_data(URLs.MNIST) Path.BASE_PATH = path . Another nifty little thing fastai has provided is to access the working directory directly on jupyter books using path.ls(). . path.ls() . I remember toggling back and forth between the terminal and the jupyter notebook while working before. It&#39;s the little things like this that let you focus on the deep learning part of the process. . Big thanks to the fastai team for including so many such features. . path.ls() . (#2) [Path(&#39;training&#39;),Path(&#39;testing&#39;)] . The MNIST dataset follows a common layout for machine learning datasets: separate folders for the training set and the validation set (and/or test set). Let&#39;s see what&#39;s inside the training set: . (path/&#39;testing&#39;).ls() . (#10) [Path(&#39;testing/4&#39;),Path(&#39;testing/3&#39;),Path(&#39;testing/8&#39;),Path(&#39;testing/7&#39;),Path(&#39;testing/0&#39;),Path(&#39;testing/1&#39;),Path(&#39;testing/5&#39;),Path(&#39;testing/2&#39;),Path(&#39;testing/6&#39;),Path(&#39;testing/9&#39;)] . (path/&#39;training&#39;).ls() . (#10) [Path(&#39;training/4&#39;),Path(&#39;training/3&#39;),Path(&#39;training/8&#39;),Path(&#39;training/7&#39;),Path(&#39;training/0&#39;),Path(&#39;training/1&#39;),Path(&#39;training/5&#39;),Path(&#39;training/2&#39;),Path(&#39;training/6&#39;),Path(&#39;training/9&#39;)] . There are separate folders for inages of each of the 10 digits. Doing this part by brute force, I am sure fastai has some cool functions to make this better. Will explore and update here: . ones = (path/&#39;training&#39;/&#39;1&#39;).ls().sorted() twos = (path/&#39;training&#39;/&#39;2&#39;).ls().sorted() threes = (path/&#39;training&#39;/&#39;3&#39;).ls().sorted() fours = (path/&#39;training&#39;/&#39;4&#39;).ls().sorted() fives = (path/&#39;training&#39;/&#39;5&#39;).ls().sorted() sixes = (path/&#39;training&#39;/&#39;6&#39;).ls().sorted() sevens = (path/&#39;training&#39;/&#39;7&#39;).ls().sorted() eights = (path/&#39;training&#39;/&#39;8&#39;).ls().sorted() nines = (path/&#39;training&#39;/&#39;9&#39;).ls().sorted() zeros = (path/&#39;training&#39;/&#39;0&#39;).ls().sorted() . im5 = Image.open(fives[0]) im5 . Image?? . Here the Image class from the Python Imaging Library (PIL) is used. This is a Python package for opening, manipulating, and viewing images. . Lets convert these Images to a Tensor so that we can create our model . zero_tensors = [tensor(Image.open(o)) for o in zeros] one_tensors = [tensor(Image.open(o)) for o in ones] two_tensors = [tensor(Image.open(o)) for o in twos] three_tensors = [tensor(Image.open(o)) for o in threes] four_tensors = [tensor(Image.open(o)) for o in fours] five_tensors = [tensor(Image.open(o)) for o in fives] six_tensors = [tensor(Image.open(o)) for o in sixes] seven_tensors = [tensor(Image.open(o)) for o in sevens] eight_tensors = [tensor(Image.open(o)) for o in eights] nine_tensors = [tensor(Image.open(o)) for o in nines] . Building the Baseline Model: KNN . One of the things emphasized in the fastai course is the need to first create a baseline model. Having an accuracy of over 90% means nothing if a simple arithmetic model has an accuracy of 95%. I have also created many fancy machine learning models only to find that using a simpler model performed far better. A model is useless if it fails to beat a simple benchmark. While it&#39;s tempting to rush in and start writing in some fancy code, it might be a good idea to create a simple baseline model to assess the quality of the model&#39;s accuracy. Here is the description of a Baseline model from the fastai course: . jargon:Baseline: A simple model which you are confident should perform reasonably well. It should be very simple to implement, and very easy to test, so that you can then test each of your improved ideas, and make sure they are always better than your baseline. Without starting with a sensible baseline, it is very difficult to know whether your super-fancy models are actually any good. One good approach to creating a baseline is doing what we have done here: think of a simple, easy-to-implement model. Another good approach is to search around to find other people that have solved similar problems to yours, and download and run their code on your dataset. Ideally, try both of these! As the MNSIT I am trying to do is a bit more complex than the sample MNSIT example in lesson 4 of the course. I am going to try and build a simple KNN Classifier and see how well this performs and hopefully should be able to get a better result using Deep Learning. This will also give me an opportunity of using Tensors to build a KNN . def euc_dist(x1, x2): return torch.sqrt(torch.sum((x1-x2)**2)) . class KNN: def __init__(self, K=3): self.K=3 def fit(self, x_train, y_train): self.X_train = x_train self.y_train = y_train def predict(self, X_test): predictions = [] for i in range(len(X_test)): dist = torch.tensor([euc_dist(X_test[i], x_t) for x_t in self.X_train]) dist_sorted = torch.argsort(dist)[:self.K] neigh_count = {} for idx in dist_sorted: if self.y_train[idx] in neigh_count: neigh_count[self.y_train[idx]] += 1 else: neigh_count[self.y_train[idx]] = 1 sorted_neigh_count = sorted(neigh_count.items(), key=operator.itemgetter(1), reverse=True) predictions.append(sorted_neigh_count[0][0]) return predictions . This script will need a way to create X and Y datasets . flat_zeros = [o.flatten().float()/255 for o in zero_tensors] flat_ones = [o.flatten().float()/255 for o in one_tensors] flat_twos = [o.flatten().float()/255 for o in two_tensors] flat_threes = [o.flatten().float()/255 for o in three_tensors] flat_fours = [o.flatten().float()/255 for o in four_tensors] flat_fives = [o.flatten().float()/255 for o in five_tensors] flat_sixes = [o.flatten().float()/255 for o in six_tensors] flat_sevens = [o.flatten().float()/255 for o in seven_tensors] flat_eights = [o.flatten().float()/255 for o in eight_tensors] flat_nines = [o.flatten().float()/255 for o in nine_tensors] . train_x = torch.cat([torch.stack(flat_zeros), torch.stack(flat_ones), torch.stack(flat_twos), torch.stack(flat_threes), torch.stack(flat_fours), torch.stack(flat_fives), torch.stack(flat_sixes), torch.stack(flat_sevens), torch.stack(flat_eights), torch.stack(flat_nines)]) . train_y = tensor([0]*len(zeros)+ [1]*len(ones)+ [2]*len(twos)+ [3]*len(threes)+ [4]*len(fours)+ [5]*len(fives)+ [6]*len(sixes)+ [7]*len(sevens)+ [8]*len(eights)+ [9]*len(nines)) . Doing the same for the testing data . ones_test = (path/&#39;testing&#39;/&#39;1&#39;).ls().sorted() twos_test = (path/&#39;testing&#39;/&#39;2&#39;).ls().sorted() threes_test = (path/&#39;testing&#39;/&#39;3&#39;).ls().sorted() fours_test = (path/&#39;testing&#39;/&#39;4&#39;).ls().sorted() fives_test = (path/&#39;testing&#39;/&#39;5&#39;).ls().sorted() sixes_test = (path/&#39;testing&#39;/&#39;6&#39;).ls().sorted() sevens_test = (path/&#39;testing&#39;/&#39;7&#39;).ls().sorted() eights_test = (path/&#39;testing&#39;/&#39;8&#39;).ls().sorted() nines_test = (path/&#39;testing&#39;/&#39;9&#39;).ls().sorted() zeros_test = (path/&#39;testing&#39;/&#39;0&#39;).ls().sorted() zero_tensors_test = [tensor(Image.open(o)) for o in zeros_test] one_tensors_test = [tensor(Image.open(o)) for o in ones_test] two_tensors_test = [tensor(Image.open(o)) for o in twos_test] three_tensors_test = [tensor(Image.open(o)) for o in threes_test] four_tensors_test = [tensor(Image.open(o)) for o in fours_test] five_tensors_test = [tensor(Image.open(o)) for o in fives_test] six_tensors_test = [tensor(Image.open(o)) for o in sixes_test] seven_tensors_test = [tensor(Image.open(o)) for o in sevens_test] eight_tensors_test = [tensor(Image.open(o)) for o in eights_test] nine_tensors_test = [tensor(Image.open(o)) for o in nines_test] flat_zeros_test = [o.flatten().float()/255 for o in zero_tensors_test] flat_ones_test = [o.flatten().float()/255 for o in one_tensors_test] flat_twos_test = [o.flatten().float()/255 for o in two_tensors_test] flat_threes_test = [o.flatten().float()/255 for o in three_tensors_test] flat_fours_test = [o.flatten().float()/255 for o in four_tensors_test] flat_fives_test = [o.flatten().float()/255 for o in five_tensors_test] flat_sixes_test = [o.flatten().float()/255 for o in six_tensors_test] flat_sevens_test = [o.flatten().float()/255 for o in seven_tensors_test] flat_eights_test = [o.flatten().float()/255 for o in eight_tensors_test] flat_nines_test = [o.flatten().float()/255 for o in nine_tensors_test] test_x = torch.cat([torch.stack(flat_zeros_test), torch.stack(flat_ones_test), torch.stack(flat_twos_test), torch.stack(flat_threes_test), torch.stack(flat_fours_test), torch.stack(flat_fives_test), torch.stack(flat_sixes_test), torch.stack(flat_sevens_test), torch.stack(flat_eights_test), torch.stack(flat_nines_test)]) test_y = tensor([0]*len(zeros_test)+ [1]*len(ones_test)+ [2]*len(twos_test)+ [3]*len(threes_test)+ [4]*len(fours_test)+ [5]*len(fives_test)+ [6]*len(sixes_test)+ [7]*len(sevens_test)+ [8]*len(eights_test)+ [9]*len(nines_test)) . Running the model to check the results. Got a first hand understanding of how slow the computation is because of the loops . model = KNN(K=3) model.fit(train_x, train_y) pred = model.predict(test_x) from sklearn.metrics import accuracy_score accuracy_score(test_y, pred) . test_y[:100] . tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) . print(len(three_tensors)) print(three_tensors[0].shape) . three_tensors[0] . len(three_tensors[0].flatten()) .",
            "url": "https://nitinkash.github.io/blog/2021/04/18/MNIST-Nitin.html",
            "relUrl": "/2021/04/18/MNIST-Nitin.html",
            "date": " • Apr 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nitinkash.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nitinkash.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Nitin Kashyap and I am primarily a consultant who helps people and companies solve problems using data science and analytics. These could include anything from automating tasks and wrangling data, creating forecasting models to improve decision making and helping identify issues to help improve customer satisfaction. I have experience in creating forecasting models, creating automated scripts for data collection, web scraping, and Social Media automation. . I have a wide areas of interests from photography and rock climbing to Social Media analytics and Application Development to Derivatives Trading. Currently I am learning Deep Learning and hope to ultimately build models to help me Day trade in the stock market. Most of my blog posts on here describe my journey in learning Deep Learning. I intend to create some cool applications of Deep Learning and add sthem here as I move on. . I am originally from Bangalore, India and I have a background in Operations Research and Optimization. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nitinkash.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nitinkash.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}